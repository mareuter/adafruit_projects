#!/usr/bin/env python

# SPDX-FileCopyrightText: 2023 Michael Reuter
#
# SPDX-License-Identifier: MIT

import argparse
import pathlib
import shutil
import tomllib

TOP_DIR = pathlib.Path(".").resolve()
PROJECT_DIRECTORY = TOP_DIR / "projects"
MODULES_INFO = PROJECT_DIRECTORY / "modules.toml"
CIRCUITBOARD_LOCATION = (
    pathlib.Path("/media") / PROJECT_DIRECTORY.parents[1].name / "CIRCUITPY"
)
# CIRCUITBOARD_LOCATION = pathlib.Path("~/temp/CIRCUITPY").expanduser()
CIRCUITBOARD_LIB = CIRCUITBOARD_LOCATION / "lib"
MPY_EXT = ".mpy"
SETTINGS_FILE = "settings.toml"
CODE_FILE = "code.py"


def copy_file_or_directory(
    dependency: str, module_path: pathlib.Path, is_directory: list
) -> None:
    if dependency not in is_directory:
        shutil.copy(module_path / (dependency + MPY_EXT), CIRCUITBOARD_LIB)
    else:
        shutil.copytree(
            module_path / dependency, CIRCUITBOARD_LIB / dependency, dirs_exist_ok=True
        )


def copy_dependencies(dep: str, name: str, info: dict) -> None:
    """Copy dependencies for import."""
    location = get_module_location(name, info)
    try:
        for ldep in info[dep][name]:
            copy_file_or_directory(ldep, location, info[name]["is_directory"])
    except KeyError:
        pass


def get_module_location(name: str, info: dict) -> pathlib.Path:
    """Path for adafruit or circuitpython library bundles."""
    dep_type = info[name]
    top_loc = pathlib.Path(dep_type["module_location"]).expanduser()
    return top_loc / dep_type["bundle"] / "lib"


def main(opts: argparse.Namespace) -> None:
    with MODULES_INFO.open("rb") as mfile:
        module_info = tomllib.load(mfile)

    with opts.project_file.expanduser().open("rb") as ifile:
        project_info = tomllib.load(ifile)

    shutil.copy(project_info["settings"], CIRCUITBOARD_LOCATION / SETTINGS_FILE)
    shutil.copy(project_info["code"], CIRCUITBOARD_LOCATION / CODE_FILE)

    adafruit_defaults = module_info["defaults"]["adafruit"]
    adafruit_location = get_module_location("adafruit", module_info)
    for adafruit_default in adafruit_defaults:
        copy_file_or_directory(
            adafruit_default, adafruit_location, module_info["adafruit"]["is_directory"]
        )

    local_imports = project_info["imports"]["local"]
    for local_import in local_imports:
        shutil.copy(local_import + MPY_EXT, CIRCUITBOARD_LIB)
        copy_dependencies(local_import, "adafruit", module_info)

    adafruit_imports = project_info["imports"]["adafruit"]
    for adafruit_import in adafruit_imports:
        copy_file_or_directory(
            adafruit_import, adafruit_location, module_info["adafruit"]["is_directory"]
        )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("project_file", type=pathlib.Path, help="Project file.")

    args = parser.parse_args()
    main(args)
